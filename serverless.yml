service: serverless-crud
frameworkVersion: "3"

custom:
  UserTableName: "users-table-${sls:stage}"
  AlertTableName: "alerts-table-${sls:stage}"

provider:
  name: aws
  stage: "dev"
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
  environment:
    USERS_TABLE: ${self:custom.UserTableName}
    JWT_SECRET: ${env:JWT_SECRET, 'someRandomSecret'}
    AWS_ACCOUNT_ID: ${aws:accountId}

functions:
  user-api:
    handler: functions/user.handler
    events:
      - httpApi: "*"
  alert-api:
    handler: functions/alert.handler
    events:
      - httpApi: "*"
  subs-cmn-alert:
    handler: cron/subAlert.commonHandler
    iam:
      role:
        statements:
          - Effect: Alllow
            Action: sns:*
  send-cmn-alert:
    handler: cron/subAlert.sendCommonAlert
    iam:
      role:
        statements:
          - Effect: Alllow
            Action: sns:*
  send-emergency-alert:
    handler: cron/subAlert.sendEmergencyAlert
    iam:
      role:
        statements:
          - Effect: Alllow
            Action: sns:*

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.UserTableName}
    AlertsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: alertId
            AttributeType: S
        KeySchema:
          - AttributeName: alertId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.AlertTableName}

plugins:
  - serverless-offline
